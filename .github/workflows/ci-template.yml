# GitHub Actions CI/CD Template for EWH Services
# Copy this to .github/workflows/ci.yml in each service repository

name: CI

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  # Job 1: Test & Lint
  test:
    name: Test & Lint
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Type check
        run: pnpm run typecheck
        continue-on-error: false

      - name: Lint
        run: pnpm run lint
        continue-on-error: false

      - name: Run tests
        run: pnpm run test --coverage
        env:
          DATABASE_URL: postgres://test:test@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          NODE_ENV: test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/coverage-final.json
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Job 2: Build
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build
        run: pnpm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/
          retention-days: 7

  # Job 3: Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

  # Job 4: Deploy to Staging (only on develop branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Scalingo CLI
        run: |
          curl -O https://cli-dl.scalingo.com/install && bash install
          echo "$HOME/bin" >> $GITHUB_PATH

      - name: Deploy to Scalingo Staging
        env:
          SCALINGO_API_TOKEN: ${{ secrets.SCALINGO_API_TOKEN }}
          # Replace SERVICE_NAME with actual service name (e.g., svc-auth)
          SCALINGO_APP_NAME: ewh-stg-SERVICE_NAME
        run: |
          scalingo login --api-token $SCALINGO_API_TOKEN
          scalingo -a $SCALINGO_APP_NAME deploy main || scalingo -a $SCALINGO_APP_NAME deploy develop

      - name: Wait for deployment
        run: sleep 30

      - name: Health check
        # Replace with actual health check URL
        run: |
          curl -f https://api.staging.polosaas.it/SERVICE_NAME/health || exit 1

      - name: Notify Slack (Success)
        if: success()
        uses: slackapi/slack-github-action@v1
        with:
          webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          payload: |
            {
              "text": "‚úÖ Staging deployment successful: SERVICE_NAME",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Staging Deployment Successful* ‚úÖ\n\n*Service:* SERVICE_NAME\n*Branch:* develop\n*Commit:* ${{ github.sha }}\n*Author:* ${{ github.actor }}"
                  }
                }
              ]
            }

      - name: Notify Slack (Failure)
        if: failure()
        uses: slackapi/slack-github-action@v1
        with:
          webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          payload: |
            {
              "text": "‚ùå Staging deployment failed: SERVICE_NAME",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Staging Deployment Failed* ‚ùå\n\n*Service:* SERVICE_NAME\n*Branch:* develop\n*Commit:* ${{ github.sha }}\n*Author:* ${{ github.actor }}\n\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Logs>"
                  }
                }
              ]
            }

  # Job 5: Deploy to Production (only on main branch, manual approval)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production  # Requires manual approval in GitHub

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Scalingo CLI
        run: |
          curl -O https://cli-dl.scalingo.com/install && bash install
          echo "$HOME/bin" >> $GITHUB_PATH

      - name: Run smoke tests on staging
        run: |
          echo "Running smoke tests on staging before production deploy..."
          curl -f https://api.staging.polosaas.it/SERVICE_NAME/health

      - name: Deploy to Scalingo Production
        env:
          SCALINGO_API_TOKEN: ${{ secrets.SCALINGO_API_TOKEN_PROD }}
          SCALINGO_APP_NAME: ewh-prod-SERVICE_NAME
        run: |
          scalingo login --api-token $SCALINGO_API_TOKEN
          scalingo -a $SCALINGO_APP_NAME deploy main

      - name: Wait for deployment
        run: sleep 60

      - name: Health check
        run: |
          curl -f https://api.polosaas.it/SERVICE_NAME/health || exit 1

      - name: Smoke tests
        run: |
          echo "Running production smoke tests..."
          # Add your smoke tests here
          curl -f https://api.polosaas.it/SERVICE_NAME/version

      - name: Notify Slack (Success)
        if: success()
        uses: slackapi/slack-github-action@v1
        with:
          webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          payload: |
            {
              "text": "üöÄ Production deployment successful: SERVICE_NAME",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Production Deployment Successful* üöÄ\n\n*Service:* SERVICE_NAME\n*Branch:* main\n*Commit:* ${{ github.sha }}\n*Author:* ${{ github.actor }}\n*Approved by:* ${{ github.event.sender.login }}"
                  }
                }
              ]
            }

      - name: Notify Slack (Failure)
        if: failure()
        uses: slackapi/slack-github-action@v1
        with:
          webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          payload: |
            {
              "text": "üö® Production deployment failed: SERVICE_NAME - URGENT",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Production Deployment Failed* üö®\n\n*Service:* SERVICE_NAME\n*Branch:* main\n*Commit:* ${{ github.sha }}\n*Author:* ${{ github.actor }}\n\n<!channel> Production deployment failed. Immediate attention required.\n\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Logs>"
                  }
                }
              ]
            }

      - name: Rollback on failure
        if: failure()
        run: |
          echo "Rolling back to previous deployment..."
          # Scalingo automatically keeps previous releases
          # You can manually rollback via dashboard or CLI
          echo "Manual rollback required: scalingo -a $SCALINGO_APP_NAME deployments"
