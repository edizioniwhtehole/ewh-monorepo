name: Deployment Notifications

on:
  push:
    branches: [main, develop]

jobs:
  notify-deploy:
    name: Notify Deployment
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Extract commit info
        id: commit
        run: |
          AUTHOR="${{ github.event.head_commit.author.name }}"
          MESSAGE="${{ github.event.head_commit.message }}"
          SHORT_SHA="${{ github.sha }}"
          SHORT_SHA="${SHORT_SHA:0:7}"

          echo "author=$AUTHOR" >> $GITHUB_OUTPUT
          echo "message=$MESSAGE" >> $GITHUB_OUTPUT
          echo "short_sha=$SHORT_SHA" >> $GITHUB_OUTPUT

      - name: Determine environment
        id: env
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "emoji=üöÄ" >> $GITHUB_OUTPUT
            echo "color=#36a64f" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "emoji=üß™" >> $GITHUB_OUTPUT
            echo "color=#ffa500" >> $GITHUB_OUTPUT
          fi

      - name: Notify Slack - Deploy Started
        uses: slackapi/slack-github-action@v1
        with:
          webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          payload: |
            {
              "attachments": [
                {
                  "color": "${{ steps.env.outputs.color }}",
                  "blocks": [
                    {
                      "type": "header",
                      "text": {
                        "type": "plain_text",
                        "text": "${{ steps.env.outputs.emoji }} Deploy to ${{ steps.env.outputs.environment }} started"
                      }
                    },
                    {
                      "type": "section",
                      "fields": [
                        {
                          "type": "mrkdwn",
                          "text": "*Repository:*\n${{ github.repository }}"
                        },
                        {
                          "type": "mrkdwn",
                          "text": "*Branch:*\n${{ github.ref_name }}"
                        },
                        {
                          "type": "mrkdwn",
                          "text": "*Author:*\n${{ steps.commit.outputs.author }}"
                        },
                        {
                          "type": "mrkdwn",
                          "text": "*Commit:*\n<${{ github.event.head_commit.url }}|${{ steps.commit.outputs.short_sha }}>"
                        }
                      ]
                    },
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": "*Message:*\n```${{ steps.commit.outputs.message }}```"
                      }
                    },
                    {
                      "type": "context",
                      "elements": [
                        {
                          "type": "mrkdwn",
                          "text": "ü§ñ Automatic deployment via GitHub Actions ‚Ä¢ <${{ github.event.compare }}|View changes>"
                        }
                      ]
                    }
                  ]
                }
              ]
            }

  create-release-notes:
    name: Create Release Notes
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --oneline)
          else
            COMMITS=$(git log ${LAST_TAG}..HEAD --oneline)
          fi

          # Format changelog
          CHANGELOG=$(echo "$COMMITS" | sed 's/^/- /')

          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            ## üöÄ Deployed to Production

            **Commit:** ${{ github.sha }}
            **Author:** ${{ github.event.head_commit.author.name }}
            **Date:** ${{ github.event.head_commit.timestamp }}

            ### üìù Changes

            ${{ steps.changelog.outputs.changelog }}

            ### üîó Links

            - [View Diff](${{ github.event.compare }})
            - [Production Dashboard](https://app.polosaas.it)
            - [Scalingo Logs](https://dashboard.scalingo.com)

            ---

            _Deployed automatically via GitHub Actions_
          draft: false
          prerelease: false
