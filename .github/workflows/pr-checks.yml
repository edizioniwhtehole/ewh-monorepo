name: PR Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  pr-title-check:
    name: Check PR Title Format
    runs-on: ubuntu-latest
    steps:
      - name: Validate PR title follows Conventional Commits
        uses: amannn/action-semantic-pull-request@v5
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            test
            chore
            perf
          scopes: |
            auth
            orders
            media
            billing
            api-gateway
            content
            layout
            products
            crm
            chat
            support
            core
            creative
            erp
            publishing
            collab
            platform
            frontend
            infra
            ci
            deps
          requireScope: false
          subjectPattern: ^[a-z].+$
          subjectPatternError: |
            The subject should start with a lowercase letter.

  pr-size-check:
    name: Check PR Size
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Calculate PR size
        id: size
        run: |
          FILES_CHANGED=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | wc -l)
          LINES_CHANGED=$(git diff --stat origin/${{ github.base_ref }}...HEAD | tail -1 | awk '{print $4+$6}')

          echo "files_changed=$FILES_CHANGED" >> $GITHUB_OUTPUT
          echo "lines_changed=$LINES_CHANGED" >> $GITHUB_OUTPUT

          echo "📊 PR Size:"
          echo "Files changed: $FILES_CHANGED"
          echo "Lines changed: $LINES_CHANGED"

      - name: Add size label
        uses: actions/github-script@v7
        with:
          script: |
            const files = ${{ steps.size.outputs.files_changed }};
            const lines = ${{ steps.size.outputs.lines_changed }};

            let sizeLabel = 'size/S';
            if (files > 50 || lines > 500) sizeLabel = 'size/XL';
            else if (files > 20 || lines > 300) sizeLabel = 'size/L';
            else if (files > 10 || lines > 150) sizeLabel = 'size/M';

            // Remove old size labels
            const labels = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });

            for (const label of labels.data) {
              if (label.name.startsWith('size/')) {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  name: label.name
                });
              }
            }

            // Add new size label
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: [sizeLabel]
            });

      - name: Warn if PR too large
        if: steps.size.outputs.files_changed > 50 || steps.size.outputs.lines_changed > 500
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: '⚠️ **Large PR Warning**\n\nThis PR is quite large (${{ steps.size.outputs.files_changed }} files, ${{ steps.size.outputs.lines_changed }} lines changed). Consider:\n- Breaking it into smaller PRs\n- Separating refactoring from feature work\n- Splitting cross-service changes\n\nLarge PRs are harder to review and more likely to introduce bugs.'
            });

  checklist-validator:
    name: Validate PR Checklist
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check PR checklist completion
        uses: actions/github-script@v7
        with:
          script: |
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });

            const body = pr.data.body || '';

            // Check for required checkboxes
            const requiredChecks = [
              'Code follows project style guidelines',
              'Self-review of code performed',
              'All tests pass locally',
              'I have read and followed the CONTRIBUTING.md guidelines'
            ];

            const unchecked = requiredChecks.filter(check => {
              const pattern = new RegExp(`- \\[ \\] .*${check}`, 'i');
              return pattern.test(body);
            });

            if (unchecked.length > 0) {
              core.warning(`⚠️ Incomplete checklist items:\n${unchecked.join('\n')}`);
            } else {
              core.info('✅ All required checklist items completed');
            }

  auto-label:
    name: Auto-label PR
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Auto-assign labels based on files changed
        uses: actions/github-script@v7
        with:
          script: |
            const files = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });

            const labels = new Set();

            for (const file of files.data) {
              const path = file.filename;

              // Add service-specific labels
              if (path.startsWith('svc-auth/')) labels.add('service:auth');
              if (path.startsWith('svc-orders/')) labels.add('service:orders');
              if (path.startsWith('svc-media/')) labels.add('service:media');
              if (path.startsWith('app-web-frontend/')) labels.add('frontend');
              if (path.startsWith('app-admin-console/')) labels.add('frontend');

              // Add type labels
              if (path.includes('test/') || path.includes('.test.')) labels.add('tests');
              if (path.endsWith('.md')) labels.add('documentation');
              if (path.includes('docker-compose') || path.includes('Dockerfile')) labels.add('docker');
              if (path.includes('.github/workflows/')) labels.add('ci/cd');
              if (path.includes('db/migrations/')) labels.add('database');

              // Add domain labels
              if (path.match(/svc-(api-gateway|auth|plugins|media|billing)/)) labels.add('domain:core');
              if (path.match(/svc-(image|video|writer|content|layout)/)) labels.add('domain:creative');
              if (path.match(/svc-(products|orders|inventory|crm)/)) labels.add('domain:erp');
              if (path.match(/svc-(chat|pm|support|boards)/)) labels.add('domain:collab');
            }

            if (labels.size > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: Array.from(labels)
              });
            }

  assign-reviewers:
    name: Auto-assign Reviewers
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Assign reviewers based on CODEOWNERS
        uses: kentaro-m/auto-assign-action@v1.2.5
        with:
          configuration-path: '.github/auto-assign.yml'
