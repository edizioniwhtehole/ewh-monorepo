name: CI - Monorepo

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  detect-changes:
    name: Detect Changed Services
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.detect.outputs.services }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: false

      - name: Detect changed submodules
        id: detect
        run: |
          # Get list of changed files
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            BASE_SHA=${{ github.event.pull_request.base.sha }}
            HEAD_SHA=${{ github.event.pull_request.head.sha }}
          else
            BASE_SHA=${{ github.event.before }}
            HEAD_SHA=${{ github.sha }}
          fi

          # Get changed submodules
          CHANGED=$(git diff --name-only $BASE_SHA $HEAD_SHA | grep -E '^(app-|svc-)' | cut -d'/' -f1 | sort -u | jq -R -s -c 'split("\n")[:-1]')

          echo "Changed services: $CHANGED"
          echo "services=$CHANGED" >> $GITHUB_OUTPUT

  lint-docs:
    name: Lint Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check markdown links
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          config-file: '.github/markdown-link-check.json'
          use-quiet-mode: 'yes'

      - name: Validate YAML files
        run: |
          sudo apt-get install -y yamllint
          yamllint .github/ compose/ || true

  validate-structure:
    name: Validate Monorepo Structure
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Verify all submodules registered
        run: |
          echo "Checking submodules configuration..."

          # Check .gitmodules exists
          if [ ! -f .gitmodules ]; then
            echo "❌ .gitmodules not found"
            exit 1
          fi

          # Count submodules in .gitmodules
          EXPECTED=52
          ACTUAL=$(grep -c '^\[submodule' .gitmodules || echo 0)

          if [ $ACTUAL -ne $EXPECTED ]; then
            echo "❌ Expected $EXPECTED submodules, found $ACTUAL"
            exit 1
          fi

          echo "✅ All $ACTUAL submodules configured"

      - name: Verify critical files exist
        run: |
          for file in ARCHITECTURE.md DEVELOPMENT.md DEPLOYMENT.md CONTRIBUTING.md README.md; do
            if [ ! -f "$file" ]; then
              echo "❌ Missing $file"
              exit 1
            fi
          done
          echo "✅ All critical documentation files present"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        continue-on-error: true
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD

  summary:
    name: CI Summary
    needs: [lint-docs, validate-structure, security-scan]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check results
        run: |
          echo "CI Pipeline Results:"
          echo "==================="
          echo "Lint Docs: ${{ needs.lint-docs.result }}"
          echo "Validate Structure: ${{ needs.validate-structure.result }}"
          echo "Security Scan: ${{ needs.security-scan.result }}"

          if [ "${{ needs.lint-docs.result }}" == "failure" ] || [ "${{ needs.validate-structure.result }}" == "failure" ] || [ "${{ needs.security-scan.result }}" == "failure" ]; then
            echo "❌ CI Failed - check logs above"
            exit 1
          else
            echo "✅ CI Passed"
          fi
